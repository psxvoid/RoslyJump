# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - "*"
  tags:
    include:
    - "*.*.*"
    - "*.*.*-rc*"

pool:
  vmImage: 'windows-latest'

variables:
  solution: '*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

jobs:
- job: VersionUpdateAndValidation
  steps:
  - checkout: self
    submodules: true

  - task: Bash@3
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/pre-build-phase-1.sh'
    name: versioning
    
- job: VsixVersionUpdateAndBuild
  dependsOn: VersionUpdateAndValidation
  condition: succeeded('VersionUpdateAndValidation')
  variables:
    activeBranch: $[dependencies.VersionUpdateAndValidation.outputs['versioning.activeBranch']]
    latestMajor: $[dependencies.VersionUpdateAndValidation.outputs['versioning.latestMajor']]
    latestMinor: $[dependencies.VersionUpdateAndValidation.outputs['versioning.latestMinor']]
    latestPatch: $[dependencies.VersionUpdateAndValidation.outputs['versioning.latestPatch']]
    isMarketplaceRelease: $[dependencies.VersionUpdateAndValidation.outputs['versioning.isMarketplaceRelease']]
    isReleaseCandidate: $[dependencies.VersionUpdateAndValidation.outputs['versioning.isReleaseCandidate']]
    revisionCounter: $[counter(format('{0}.{1}.{2}-{3}', variables['latestMajor'], variables['latestMinor'], variables['latestPatch'], variables['isMarketplaceRelease']), 0)]

  steps:
  - checkout: self
    submodules: true

  - task: Bash@3
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/pre-build-phase-2.sh'

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\RoslyJump*xUnit.dll
        **\dngrep*xunit.dll
        !**\*TestAdapter.dll
        !**\obj\**
        !**\bin\**\ref\**
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runInParallel: true
      codeCoverageEnabled: true
      otherConsoleOptions: '/Framework:.NETCoreApp,Version=3.1'

  - task: CopyFiles@2
    displayName: 'Copy pre-release.sh'
    inputs:
      contents: pre-release.sh
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'release'
      publishLocation: 'Container'

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: 'pre-release.sh'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: |
        publishManifest.json
        build-results.json
        readme.md
        **\*.vsix
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ${{ if eq(variables['isMarketplaceRelease'], 'true') }}:
        ArtifactName: 'prod'
      ${{ if eq(variables['isReleaseCandidate'], 'true') }}:
        ArtifactName: 'rc'
      ${{ if and(ne(variables['isReleaseCandidate'], 'true'), ne(variables['isMarketplaceRelease'], 'true')) }}:
        ArtifactName: 'ci'
      publishLocation: 'Container'
